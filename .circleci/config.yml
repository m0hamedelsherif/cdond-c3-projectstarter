version: 2.1

commands:
  install-ansible:
    description: "Install Ansible"
    steps:
      - run:
          name: "Install ansible"
          command: |
            sudo apt update -y
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y

  install-aws:
    description: "Install AWS CLI"
    steps:
      - run:
          name: "Install AWS CLI"
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        description: circle ci workflow id
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.Workflow_ID>>
            aws s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.Workflow_ID>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      Workflow_ID:
        description: circle ci workflow id
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure http://kvdb.io/${KVDB_BUCKET}/migrations_<<parameters.Workflow_ID>>)
            if [ $SUCCESS == "1" ] 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi


nodebase: &nodebase
  docker:
    - image: cimg/node:13.8.0

infrastructurebase: &infrastructurebase
  docker:
    - image: cimg/base:stable

jobs:
  build-frontend:
    <<: *nodebase
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build Front-end
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    <<: *nodebase
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build Back-end
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    <<: *nodebase
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test Front-end
          command: |
            cd frontend
            npm i
            npm test

  test-backend:
    <<: *nodebase
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test Back-end
          command: |
            cd backend
            npm i
            npm test

  scan-frontend:
    <<: *nodebase
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan Front-end
          command: |
            cd frontend
            npm i
            npm audit fix --force
            npm audit fix --force
            npm audit --audit-level=critical

  scan-backend:
    <<: *nodebase
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan Back-end
          command: |
            cd backend
            npm i
            npm audit fix --force
            npm audit fix --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    <<: *infrastructurebase
    steps:
      - checkout
      - install-aws
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment

  configure-infrastructure:
    <<: *infrastructurebase
    steps:
      - checkout
      - install-aws
      - install-ansible
      - add_ssh_keys:
          fingerprints: ["cb:f2:03:bb:83:11:da:24:7d:d5:0a:1e:93:a9:f5:11"]
      - attach_workspace:
          at:  ~/
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml

      - destroy-environment

  run-migrations:
    <<: *nodebase
    steps:
      - checkout
      - install-aws
      - install-ansible
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm i
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb store
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl http://kvdb.io/${KVDB_BUCKET}/migrations_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            fi
      - destroy-environment
      - revert-migrations

  deploy-frontend:
    <<: *nodebase
    steps:
      - checkout
      - install-aws
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm i
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query "Reservations[*].Instances[*].PublicDnsName" \
              --output text)
            echo $BACKEND_IP
            echo "API_URL=http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm run build
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

      - destroy-environment
      - revert-migrations

  deploy-backend:
    <<: *nodebase
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - install-aws
      - install-ansible
      - add_ssh_keys:
          fingerprints: ["cb:f2:03:bb:83:11:da:24:7d:d5:0a:1e:93:a9:f5:11"]
      - attach_workspace:
          at:  ~/      
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm i
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            echo NODE_ENV=production >> .env
            echo VERSION="1" >> .env
            echo TYPEORM_CONNECTION="${TYPEORM_CONNECTION}" >> .env
            echo TYPEORM_MIGRATIONS_DIR="${TYPEORM_MIGRATIONS_DIR}" >> .env
            echo TYPEORM_MIGRATIONS="${TYPEORM_MIGRATIONS}" >> .env
            echo TYPEORM_ENTITIES="${TYPEORM_ENTITIES}" >> .env
            echo TYPEORM_HOST="${TYPEORM_HOST}" >> .env
            echo TYPEORM_PORT="${TYPEORM_PORT}" >> .env
            echo TYPEORM_USERNAME="${TYPEORM_USERNAME}" >> .env
            echo TYPEORM_PASSWORD="${TYPEORM_PASSWORD}" >> .env
            echo TYPEORM_DATABASE="${TYPEORM_DATABASE}" >> .env
            cat .env
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cp artifact.tar.gz .circleci/ansible/roles/deploy/files
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml -vv
      - destroy-environment
      - revert-migrations

  smoke-test:
    <<: *infrastructurebase
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - install-aws
      - run:
          name: Get backend url
          command: |
              BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query "Reservations[*].Instances[*].PublicDnsName" \
              --output text)
              echo "${BACKEND_IP}" >> env.txt
              cat env.txt
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_IP=$(cat env.txt)
            echo  "Backend IP: ${BACKEND_IP}"
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                exit 0
            else
                exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
              URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
              echo ${URL} 
              if curl -s ${URL} | grep "Welcome"
              then
                exit 0
              else
                exit 1
              fi
      - destroy-environment
      - revert-migrations

  cloudfront-update:
    <<: *infrastructurebase
    steps:
      - checkout
      - install-aws
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
                    --template-file .circleci/files/cloudfront.yml \
                    --stack-name cloudfront-stack \
                    --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
                    --tags project=udapeople

  cleanup:
    <<: *infrastructurebase
    steps:
      - checkout
      - install-aws
      - run:
          name: Get old stack workflow id
          command: |
            # Fetch the Old workflow ID
            export OldWorkflowID=$(aws cloudformation \
                    list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                    --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                    --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"
            # pass data to $BASH_ENV
            echo "export OldWorkflowID=$OldWorkflowID" >> $BASH_ENV 
            echo "export STACKS=$STACKS" >> $BASH_ENV           
      - run:
          name: Remove old stacks and files
          command: |
            CurrentWorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"
            echo verifying stacks ids "${OldWorkflowID}" against current status "${CIRCLE_WORKFLOW_ID:0:7}"
            if [[ "${CurrentWorkflowID}" =~ "${OldWorkflowID}" ]]
            then
              echo removing old stacks linked with "${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name udapeople-backend-${OldWorkflowID}
              aws s3 rm s3://udapeople-${OldWorkflowID} --recursive
              aws cloudformation delete-stack --stack-name udapeople-frontend-${OldWorkflowID}
            fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
